<?php
declare(strict_types=1);

namespace Plaisio\ExceptionHandler\Test\Command;

use Plaisio\Exception\BadRequestException;
use Plaisio\Exception\InvalidUrlException;
use Plaisio\Exception\NotAuthorizedException;
use Plaisio\Exception\NotPreferredUrlException;
use Plaisio\ExceptionHandler\BadRequestExceptionAgent;
use Plaisio\ExceptionHandler\DecodeExceptionAgent;
use Plaisio\ExceptionHandler\ExceptionHandler;
use Plaisio\ExceptionHandler\InvalidUrlExceptionAgent;
use Plaisio\ExceptionHandler\NotAuthorizedExceptionAgent;
use Plaisio\ExceptionHandler\NotPreferredUrlExceptionAgent;
use Plaisio\ExceptionHandler\ResultExceptionAgent;
use Plaisio\ExceptionHandler\ThrowableAgent;
use Plaisio\Obfuscator\Exception\DecodeException;
use Plaisio\PlaisioObject;
use Plaisio\Response\Response;
use SetBased\Stratum\Middle\Exception\ResultException;

/**
 * Concrete implementation of the exception handler.
 */
class Foo extends PlaisioObject implements ExceptionHandler
{
  //--------------------------------------------------------------------------------------------------------------------
  /**
   * @inheritdoc
   */
  public function handlePrepareException(\Throwable $exception): Response
  {
    if (is_a($exception, BadRequestException::class))
    {
      /** @var BadRequestException $exception */
      $handler = new BadRequestExceptionAgent($this);

      return $handler->handlePrepareException($exception);
    }

    if (is_a($exception, DecodeException::class))
    {
      /** @var DecodeException $exception */
      $handler = new DecodeExceptionAgent($this);

      return $handler->handlePrepareException($exception);
    }

    if (is_a($exception, InvalidUrlException::class))
    {
      /** @var InvalidUrlException $exception */
      $handler = new InvalidUrlExceptionAgent($this);

      return $handler->handlePrepareException($exception);
    }

    if (is_a($exception, NotAuthorizedException::class))
    {
      /** @var NotAuthorizedException $exception */
      $handler = new NotAuthorizedExceptionAgent($this);

      return $handler->handlePrepareException($exception);
    }

    $handler = new ThrowableAgent($this);

    return $handler->handlePrepareException($exception);
  }

  //--------------------------------------------------------------------------------------------------------------------
  /**
   * @inheritdoc
   */
  public function handleConstructException(\Throwable $exception): Response
  {
    if (is_a($exception, BadRequestException::class))
    {
      /** @var BadRequestException $exception */
      $handler = new BadRequestExceptionAgent($this);

      return $handler->handleConstructException($exception);
    }

    if (is_a($exception, DecodeException::class))
    {
      /** @var DecodeException $exception */
      $handler = new DecodeExceptionAgent($this);

      return $handler->handleConstructException($exception);
    }

    if (is_a($exception, InvalidUrlException::class))
    {
      /** @var InvalidUrlException $exception */
      $handler = new InvalidUrlExceptionAgent($this);

      return $handler->handleConstructException($exception);
    }

    if (is_a($exception, NotAuthorizedException::class))
    {
      /** @var NotAuthorizedException $exception */
      $handler = new NotAuthorizedExceptionAgent($this);

      return $handler->handleConstructException($exception);
    }

    if (is_a($exception, ResultException::class))
    {
      /** @var ResultException $exception */
      $handler = new ResultExceptionAgent($this);

      return $handler->handleConstructException($exception);
    }

    $handler = new ThrowableAgent($this);

    return $handler->handleConstructException($exception);
  }

  //--------------------------------------------------------------------------------------------------------------------
  /**
   * @inheritdoc
   */
  public function handleResponseException(\Throwable $exception): Response
  {
    if (is_a($exception, BadRequestException::class))
    {
      /** @var BadRequestException $exception */
      $handler = new BadRequestExceptionAgent($this);

      return $handler->handleResponseException($exception);
    }

    if (is_a($exception, DecodeException::class))
    {
      /** @var DecodeException $exception */
      $handler = new DecodeExceptionAgent($this);

      return $handler->handleResponseException($exception);
    }

    if (is_a($exception, InvalidUrlException::class))
    {
      /** @var InvalidUrlException $exception */
      $handler = new InvalidUrlExceptionAgent($this);

      return $handler->handleResponseException($exception);
    }

    if (is_a($exception, NotAuthorizedException::class))
    {
      /** @var NotAuthorizedException $exception */
      $handler = new NotAuthorizedExceptionAgent($this);

      return $handler->handleResponseException($exception);
    }

    if (is_a($exception, NotPreferredUrlException::class))
    {
      /** @var NotPreferredUrlException $exception */
      $handler = new NotPreferredUrlExceptionAgent($this);

      return $handler->handleResponseException($exception);
    }

    $handler = new ThrowableAgent($this);

    return $handler->handleResponseException($exception);
  }

  //--------------------------------------------------------------------------------------------------------------------
  /**
   * @inheritdoc
   */
  public function handleFinalizeException(\Throwable $exception): Response
  {
    $handler = new ThrowableAgent($this);

    return $handler->handleFinalizeException($exception);
  }

  //--------------------------------------------------------------------------------------------------------------------
}

//----------------------------------------------------------------------------------------------------------------------
