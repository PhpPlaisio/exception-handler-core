<?php
declare(strict_types=1);

namespace SetBased\Stratum\Test\Application;

use Plaisio\ExceptionHandler\ExceptionHandler;

/**
 * Concrete implementation of the exception handler.
 */
class Foo implements ExceptionHandler
{
  //--------------------------------------------------------------------------------------------------------------------
  /**
   * @inheritdoc
   */
  public function handlePrepareException(\Throwable $exception): void
  {
    switch (true)
    {
      case is_a($exception, 'Plaisio\Exception\BadRequestException'):
        /** @var \Plaisio\Exception\BadRequestException $exception */
        $handler = new \Plaisio\ExceptionHandler\BadRequestExceptionAgent();
        $handler->handlePrepareException($exception);
        break;

      case is_a($exception, 'Plaisio\Exception\InvalidUrlException'):
        /** @var \Plaisio\Exception\InvalidUrlException $exception */
        $handler = new \Plaisio\ExceptionHandler\InvalidUrlExceptionAgent();
        $handler->handlePrepareException($exception);
        break;

      case is_a($exception, 'Plaisio\Exception\NotAuthorizedException'):
        /** @var \Plaisio\Exception\NotAuthorizedException $exception */
        $handler = new \Plaisio\ExceptionHandler\NotAuthorizedExceptionAgent();
        $handler->handlePrepareException($exception);
        break;

      case is_a($exception, 'Throwable'):
        /** @var \Throwable $exception */
        $handler = new \Plaisio\ExceptionHandler\ThrowableAgent();
        $handler->handlePrepareException($exception);
        break;
    }
  }

  //--------------------------------------------------------------------------------------------------------------------
  /**
   * @inheritdoc
   */
  public function handleConstructException(\Throwable $exception): void
  {
    switch (true)
    {
      case is_a($exception, 'Plaisio\Exception\BadRequestException'):
        /** @var \Plaisio\Exception\BadRequestException $exception */
        $handler = new \Plaisio\ExceptionHandler\BadRequestExceptionAgent();
        $handler->handleConstructException($exception);
        break;

      case is_a($exception, 'Plaisio\Exception\InvalidUrlException'):
        /** @var \Plaisio\Exception\InvalidUrlException $exception */
        $handler = new \Plaisio\ExceptionHandler\InvalidUrlExceptionAgent();
        $handler->handleConstructException($exception);
        break;

      case is_a($exception, 'Plaisio\Exception\NotAuthorizedException'):
        /** @var \Plaisio\Exception\NotAuthorizedException $exception */
        $handler = new \Plaisio\ExceptionHandler\NotAuthorizedExceptionAgent();
        $handler->handleConstructException($exception);
        break;

      case is_a($exception, 'SetBased\Stratum\Middle\Exception\ResultException'):
        /** @var \SetBased\Stratum\Middle\Exception\ResultException $exception */
        $handler = new \Plaisio\ExceptionHandler\ResultExceptionAgent();
        $handler->handleConstructException($exception);
        break;

      case is_a($exception, 'Throwable'):
        /** @var \Throwable $exception */
        $handler = new \Plaisio\ExceptionHandler\ThrowableAgent();
        $handler->handleConstructException($exception);
        break;
    }
  }

  //--------------------------------------------------------------------------------------------------------------------
  /**
   * @inheritdoc
   */
  public function handleResponseException(\Throwable $exception): void
  {
    switch (true)
    {
      case is_a($exception, 'Plaisio\Exception\BadRequestException'):
        /** @var \Plaisio\Exception\BadRequestException $exception */
        $handler = new \Plaisio\ExceptionHandler\BadRequestExceptionAgent();
        $handler->handleResponseException($exception);
        break;

      case is_a($exception, 'Plaisio\Exception\InvalidUrlException'):
        /** @var \Plaisio\Exception\InvalidUrlException $exception */
        $handler = new \Plaisio\ExceptionHandler\InvalidUrlExceptionAgent();
        $handler->handleResponseException($exception);
        break;

      case is_a($exception, 'Plaisio\Exception\NotAuthorizedException'):
        /** @var \Plaisio\Exception\NotAuthorizedException $exception */
        $handler = new \Plaisio\ExceptionHandler\NotAuthorizedExceptionAgent();
        $handler->handleResponseException($exception);
        break;

      case is_a($exception, 'Plaisio\Exception\NotPreferredUrlException'):
        /** @var \Plaisio\Exception\NotPreferredUrlException $exception */
        $handler = new \Plaisio\ExceptionHandler\NotPreferredUrlExceptionAgent();
        $handler->handleResponseException($exception);
        break;

      case is_a($exception, 'Throwable'):
        /** @var \Throwable $exception */
        $handler = new \Plaisio\ExceptionHandler\ThrowableAgent();
        $handler->handleResponseException($exception);
        break;
    }
  }

  //--------------------------------------------------------------------------------------------------------------------
  /**
   * @inheritdoc
   */
  public function handleFinalizeException(\Throwable $exception): void
  {
    switch (true)
    {
      case is_a($exception, 'Throwable'):
        /** @var \Throwable $exception */
        $handler = new \Plaisio\ExceptionHandler\ThrowableAgent();
        $handler->handleFinalizeException($exception);
        break;
    }
  }

  //--------------------------------------------------------------------------------------------------------------------
}

//----------------------------------------------------------------------------------------------------------------------
