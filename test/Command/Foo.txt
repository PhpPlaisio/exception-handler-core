<?php
declare(strict_types=1);

namespace SetBased\Stratum\Test\Application;

use Plaisio\Exception\BadRequestException;
use Plaisio\Exception\InvalidUrlException;
use Plaisio\Exception\NotAuthorizedException;
use Plaisio\Exception\NotPreferredUrlException;
use Plaisio\ExceptionHandler\BadRequestExceptionAgent;
use Plaisio\ExceptionHandler\DecodeExceptionAgent;
use Plaisio\ExceptionHandler\ExceptionHandler;
use Plaisio\ExceptionHandler\InvalidUrlExceptionAgent;
use Plaisio\ExceptionHandler\NotAuthorizedExceptionAgent;
use Plaisio\ExceptionHandler\NotPreferredUrlExceptionAgent;
use Plaisio\ExceptionHandler\ResultExceptionAgent;
use Plaisio\ExceptionHandler\ThrowableAgent;
use Plaisio\Obfuscator\Exception\DecodeException;
use Plaisio\PlaisioObject;
use SetBased\Stratum\Middle\Exception\ResultException;

/**
 * Concrete implementation of the exception handler.
 */
class Foo extends PlaisioObject implements ExceptionHandler
{
  //--------------------------------------------------------------------------------------------------------------------
  /**
   * @inheritdoc
   */
  public function handlePrepareException(\Throwable $exception): void
  {
    switch (true)
    {
      case is_a($exception, BadRequestException::class):
        /** @var BadRequestException $exception */
        $handler = new BadRequestExceptionAgent($this);
        $handler->handlePrepareException($exception);
        break;

      case is_a($exception, DecodeException::class):
        /** @var DecodeException $exception */
        $handler = new DecodeExceptionAgent($this);
        $handler->handlePrepareException($exception);
        break;

      case is_a($exception, InvalidUrlException::class):
        /** @var InvalidUrlException $exception */
        $handler = new InvalidUrlExceptionAgent($this);
        $handler->handlePrepareException($exception);
        break;

      case is_a($exception, NotAuthorizedException::class):
        /** @var NotAuthorizedException $exception */
        $handler = new NotAuthorizedExceptionAgent($this);
        $handler->handlePrepareException($exception);
        break;

      case is_a($exception, \Throwable::class):
        /** @var \Throwable $exception */
        $handler = new ThrowableAgent($this);
        $handler->handlePrepareException($exception);
        break;
    }
  }

  //--------------------------------------------------------------------------------------------------------------------
  /**
   * @inheritdoc
   */
  public function handleConstructException(\Throwable $exception): void
  {
    switch (true)
    {
      case is_a($exception, BadRequestException::class):
        /** @var BadRequestException $exception */
        $handler = new BadRequestExceptionAgent($this);
        $handler->handleConstructException($exception);
        break;

      case is_a($exception, DecodeException::class):
        /** @var DecodeException $exception */
        $handler = new DecodeExceptionAgent($this);
        $handler->handleConstructException($exception);
        break;

      case is_a($exception, InvalidUrlException::class):
        /** @var InvalidUrlException $exception */
        $handler = new InvalidUrlExceptionAgent($this);
        $handler->handleConstructException($exception);
        break;

      case is_a($exception, NotAuthorizedException::class):
        /** @var NotAuthorizedException $exception */
        $handler = new NotAuthorizedExceptionAgent($this);
        $handler->handleConstructException($exception);
        break;

      case is_a($exception, ResultException::class):
        /** @var ResultException $exception */
        $handler = new ResultExceptionAgent($this);
        $handler->handleConstructException($exception);
        break;

      case is_a($exception, \Throwable::class):
        /** @var \Throwable $exception */
        $handler = new ThrowableAgent($this);
        $handler->handleConstructException($exception);
        break;
    }
  }

  //--------------------------------------------------------------------------------------------------------------------
  /**
   * @inheritdoc
   */
  public function handleResponseException(\Throwable $exception): void
  {
    switch (true)
    {
      case is_a($exception, BadRequestException::class):
        /** @var BadRequestException $exception */
        $handler = new BadRequestExceptionAgent($this);
        $handler->handleResponseException($exception);
        break;

      case is_a($exception, DecodeException::class):
        /** @var DecodeException $exception */
        $handler = new DecodeExceptionAgent($this);
        $handler->handleResponseException($exception);
        break;

      case is_a($exception, InvalidUrlException::class):
        /** @var InvalidUrlException $exception */
        $handler = new InvalidUrlExceptionAgent($this);
        $handler->handleResponseException($exception);
        break;

      case is_a($exception, NotAuthorizedException::class):
        /** @var NotAuthorizedException $exception */
        $handler = new NotAuthorizedExceptionAgent($this);
        $handler->handleResponseException($exception);
        break;

      case is_a($exception, NotPreferredUrlException::class):
        /** @var NotPreferredUrlException $exception */
        $handler = new NotPreferredUrlExceptionAgent($this);
        $handler->handleResponseException($exception);
        break;

      case is_a($exception, \Throwable::class):
        /** @var \Throwable $exception */
        $handler = new ThrowableAgent($this);
        $handler->handleResponseException($exception);
        break;
    }
  }

  //--------------------------------------------------------------------------------------------------------------------
  /**
   * @inheritdoc
   */
  public function handleFinalizeException(\Throwable $exception): void
  {
    switch (true)
    {
      case is_a($exception, \Throwable::class):
        /** @var \Throwable $exception */
        $handler = new ThrowableAgent($this);
        $handler->handleFinalizeException($exception);
        break;
    }
  }

  //--------------------------------------------------------------------------------------------------------------------
}

//----------------------------------------------------------------------------------------------------------------------
